// Generated by CoffeeScript 1.9.2
var bcrypt;

bcrypt = require('bcrypt');

module.exports = function(sequelize, DataTypes) {
  return sequelize.define('User', {
    email: {
      type: DataTypes.STRING,
      unique: true,
      isEmail: true,
      len: [6, 75]
    },
    hash: DataTypes.STRING,
    salt: DataTypes.STRING
  }, {
    instanceMethods: {
      setPassword: function(password, callback) {
        var that;
        that = this;
        bcrypt.genSalt(10, function(err, salt) {
          if (err) {
            return callback(err, null);
          }
          bcrypt.hash(password, salt, function(err, hash) {
            if (err) {
              return callback(err, null);
            }
            that.hash = hash;
            that.salt = salt;
            return callback(null, that);
          });
        });
      },
      verifyPassword: function(password, callback) {
        bcrypt.compare(password, this.hash, callback);
      }
    },
    classMethods: {
      authenticate: function(email, password, callback) {
        this.find({
          where: {
            email: email
          }
        }).success(function(user) {
          if (!user) {
            return callback(null, false);
          }
          user.verifyPassword(password, function(err, passwordCorrect) {
            if (err) {
              return callback(err, false);
            }
            if (!passwordCorrect) {
              return callback(null, false);
            }
            return callback(null, user);
          });
        }).error(function(error) {
          return callback(error);
        });
      },
      authenticateHash: function(email, hash, callback) {
        this.find({
          where: {
            email: email
          }
        }).success(function(user) {
          if (!user) {
            return callback(null, false);
          }
          if (hash === user.hash) {
            return callback(null, user);
          } else {
            return callback(null, false);
          }
        }).error(function(error) {
          return callback(error);
        });
      }
    }
  });
};
